@model List<(string ImageUrl, string Text, string TranslatedText)>

@{
    ViewData["Title"] = "Chỉnh sửa văn bản và tạo video";
}

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: #f0f2f5;
        color: #333;
        margin: 0;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    h2 {
        color: #2c3e50;
        margin-bottom: 25px;
        font-size: 2.2em;
        font-weight: 700;
        text-align: center;
        width: 100%;
    }

    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 8px;
        width: 90%;
        max-width: 800px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    form {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        width: 90%;
        max-width: 900px;
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .image-container {
        position: relative;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        width: 250px;
        height: auto;
    }

        .image-container img {
            display: block;
            max-width: 100%;
            height: auto;
            border-radius: 8px;
        }

    .ui-resizable-handle {
        position: absolute;
        font-size: 0.1px;
        display: block;
    }

    .ui-resizable-n {
        cursor: n-resize;
        height: 7px;
        width: 100%;
        top: -5px;
        left: 0;
    }

    .ui-resizable-s {
        cursor: s-resize;
        height: 7px;
        width: 100%;
        bottom: -5px;
        left: 0;
    }

    .ui-resizable-e {
        cursor: e-resize;
        width: 7px;
        right: -5px;
        top: 0;
        height: 100%;
    }

    .ui-resizable-w {
        cursor: w-resize;
        width: 7px;
        left: -5px;
        top: 0;
        height: 100%;
    }

    .ui-resizable-se, .ui-resizable-sw, .ui-resizable-ne, .ui-resizable-nw {
        width: 12px;
        height: 12px;
    }

    .ui-resizable-se {
        cursor: se-resize;
        right: 1px;
        bottom: 1px;
    }

    .ui-resizable-sw {
        cursor: sw-resize;
        left: 1px;
        bottom: 1px;
    }

    .ui-resizable-ne {
        cursor: ne-resize;
        right: 1px;
        top: 1px;
    }

    .ui-resizable-nw {
        cursor: nw-resize;
        left: 1px;
        top: 1px;
    }

    .image-text-pair {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 20px;
        background-color: #fafafa;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        position: relative;
    }

    .reorder-buttons {
        display: flex;
        flex-direction: column;
        gap: 5px;
        position: absolute;
        left: 10px;
        top: 10px;
        z-index: 10;
    }

        .reorder-buttons button {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8em;
            background-color: #f0f0f0;
            color: #555;
            transition: background-color 0.2s ease;
        }

            .reorder-buttons button:hover {
                background-color: #e0e0e0;
            }

    .aspect-ratio-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
        justify-content: center;
    }

        .aspect-ratio-controls button {
            padding: 8px 12px;
            border: 1px solid #007bff;
            border-radius: 5px;
            background-color: #e6f2ff;
            color: #007bff;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease, border-color 0.2s ease;
        }

            .aspect-ratio-controls button.active,
            .aspect-ratio-controls button:hover {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }

    .text-area-group {
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
    }

    .form-group {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .form-group label {
            font-weight: 600;
            color: #555;
        }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 1em;
        resize: vertical;
        box-sizing: border-box;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
            outline: none;
        }

    .actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 10px;
        gap: 10px;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1em;
        font-weight: 600;
        transition: background-color 0.3s ease, transform 0.2s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

    .btn-correct {
        background-color: #28a745;
        color: white;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-combine {
        background-color: #ff851b;
        color: white;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-upload {
        background-color: #17a2b8;
        color: white;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-delete {
        background-color: #dc3545;
        color: white;
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.9em;
        z-index: 10;
    }

        .btn-delete:hover {
            background-color: #c82333;
            transform: translateY(-1px);
        }

    .btn-reset {
        background-color: #6c757d;
        color: white;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .btn-reset:hover {
            background-color: #5a6268;
            transform: translateY(-2px);
        }

    #undoDeleteBtn {
        background-color: #00c853;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 1em;
        font-weight: 600;
        transition: background-color 0.3s ease, transform 0.2s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-top: 20px;
    }

        #undoDeleteBtn:hover {
            background-color: #00a541;
            transform: translateY(-2px);
        }

        #undoDeleteBtn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

    .btn-correct:hover, .btn-combine:hover, .btn-upload:hover {
        transform: translateY(-2px);
    }

    .btn-correct:hover {
        background-color: #218838;
    }

    .btn-combine:hover {
        background-color: #e57300;
    }

    .btn-upload:hover {
        background-color: #138496;
    }

    .btn-correct:disabled, .btn-primary:disabled, .btn-combine:disabled, .btn-upload:disabled, .btn-delete:disabled, .btn-reset:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        box-shadow: none;
        transform: none;
    }

    .btn-loading {
        pointer-events: none;
        opacity: 0.8;
    }

    .form-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
        flex-wrap: wrap;
    }

    .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #fff;
        border-radius: 50%;
        width: 16px;
        height: 16px;
        animation: spin 1s linear infinite;
        display: none;
        vertical-align: middle;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    #globalSpinner, #globalStatus {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
        font-weight: 600;
        color: #007bff;
    }

    #globalStatus {
        color: #555;
    }

    #uploadTextInput {
        display: none;
    }

    @@media (min-width: 768px) {
        .image-text-pair {
            flex-direction: row;
            align-items: flex-start;
        }

        .image-container {
            max-width: 300px;
            width: auto;
        }

        .text-area-group {
            flex: 1;
        }
    }
</style>

<h2>Chỉnh sửa văn bản và tạo video</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["Error"]
    </div>
}

<form id="createVideoForm" asp-action="CreateVideo" method="post">
    @Html.AntiForgeryToken()
    <div id="imageTextPairsContainer">
        @for (int i = 0; i < Model.Count; i++)
        {
            var item = Model.ElementAt(i);
            <div class="image-text-pair" id="imageTextPair_@i">
                <div class="reorder-buttons">
                    <button type="button" class="move-up">Lên</button>
                    <button type="button" class="move-down">Xuống</button>
                </div>
                <input type="hidden" name="selectedImages" value="@item.ImageUrl" />
                <input type="hidden" id="imageWidth_@i" name="imageWidths" value="250" />
                <input type="hidden" id="imageHeight_@i" name="imageHeights" value="140.625" />
                <input type="hidden" id="selectedAspectRatio_@i" name="selectedAspectRatios" value="16/9" />

                <div class="image-container" id="imageContainer_@i">
                    <img id="image_@i" src="@Url.Content(item.ImageUrl)" alt="Image @(i+1)" />
                </div>

                <div class="aspect-ratio-controls" id="aspectRatioControls_@i">
                    <button type="button" data-ratio="16/9" class="active">16:9</button>
                    <button type="button" data-ratio="9/16">9:16</button>
                    <button type="button" data-ratio="4/3">4:3</button>
                    <button type="button" data-ratio="3/4">3:4</button>
                    <button type="button" data-ratio="1/1">1:1</button>
                    <button type="button" data-ratio="4/5">4:5</button>
                    <button type="button" data-ratio="5/4">5:4</button>
                    <button type="button" data-ratio="2/3">2:3</button>
                    <button type="button" data-ratio="3/2">3:2</button>
                    <button type="button" data-ratio="5/7">5:7</button>
                    <button type="button" data-ratio="7/5">7:5</button>
                    <button type="button" data-ratio="false">Tự do</button>
                </div>

                <div class="text-area-group">
                    <div class="form-group">
                        <label for="text_@i">Văn bản nhận diện:</label>
                        <textarea id="text_@i" name="selectedTexts" class="form-control" rows="4" data-original-text="@item.Text">@item.Text</textarea>
                        <div class="actions">
                            <button type="button" class="btn btn-correct">
                                Sửa tiếng Việt với Gemini
                                <span class="spinner" id="spinner_@i"></span>
                            </button>
                            <button type="button" class="btn btn-reset">
                                Hoàn tác
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="translatedText_@i">Bản dịch tiếng Anh (chỉ xem):</label>
                        <textarea id="translatedText_@i" name="translatedTexts" class="form-control" rows="4" readonly>@item.TranslatedText</textarea>
                    </div>
                </div>
                <button type="button" class="btn btn-delete">Xóa</button>
            </div>
        }
    </div>

    <button type="button" id="undoDeleteBtn" style="display:none;">Hoàn tác xóa</button>

    <div class="form-group">
        <label for="language">Chọn ngôn ngữ cho Audio:</label>
        <select id="language" name="language" class="form-control">
            <option value="vi">Tiếng Việt</option>
            <option value="en">Tiếng Anh</option>
        </select>
    </div>

    <div class="form-actions">
        <button type="button" class="btn btn-correct" id="correctAllBtn">
            Sửa tất cả tiếng Việt với Gemini
            <span class="spinner" id="correctAllSpinner"></span>
        </button>
        <button type="button" class="btn btn-combine" id="combineTextsBtn">
            Gộp văn bản
            <span class="spinner" id="combineSpinner"></span>
        </button>
        <button type="button" class="btn btn-upload" id="uploadTextBtn">
            Tải lên văn bản đã chỉnh sửa
            <span class="spinner" id="uploadSpinner"></span>
        </button>
        <input type="file" id="uploadTextInput" accept=".txt" />
        <button type="submit" class="btn btn-primary">Tạo Video với Audio</button>
    </div>

    <div id="globalStatus" style="display: none;">
        <span id="globalSpinner" class="spinner"></span>
        <span id="globalMessage"></span>
    </div>
</form>

@section Scripts {
    <script>
        const originalTexts = {};
        let deletedItems = [];
        let nextIndex = @Model.Count;
        const resizableInstances = {};

        $(document).ready(function () {
            // Khởi tạo originalTexts
            document.querySelectorAll('textarea[name="selectedTexts"]').forEach(textarea => {
                originalTexts[textarea.id] = textarea.value;
            });
            updateUndoButtonVisibility();

            // Khởi tạo resizable cho tất cả ảnh
            initializeResizableImages();

            // Gắn sự kiện bằng event delegation
            document.getElementById('imageTextPairsContainer').addEventListener('click', function(event) {
                const target = event.target;
                const pair = target.closest('.image-text-pair');
                if (!pair) return;
                const index = pair.id.replace('imageTextPair_', '');

                if (target.matches('.btn-correct')) {
                    correctText(index);
                } else if (target.matches('.btn-reset')) {
                    resetText(index);
                } else if (target.matches('.btn-delete')) {
                    const imgUrlInput = pair.querySelector('input[name="selectedImages"]');
                    const textArea = pair.querySelector('textarea[name="selectedTexts"]');
                    const translatedTextArea = pair.querySelector('textarea[name="translatedTexts"]');
                    deleteImageTextPair(index, imgUrlInput.value, textArea.value, translatedTextArea.value);
                } else if (target.matches('.move-up')) {
                    moveUp(index);
                } else if (target.matches('.move-down')) {
                    moveDown(index);
                } else if (target.matches('.aspect-ratio-controls button')) {
                    const ratio = target.getAttribute('data-ratio');
                    setAspectRatio(index, ratio === 'false' ? false : eval(ratio), target);
                }
            });

            // Gắn sự kiện cho các nút ngoài container
            document.getElementById('undoDeleteBtn').addEventListener('click', undoDelete);
            document.getElementById('correctAllBtn').addEventListener('click', correctAllTextsWithGemini);
            document.getElementById('combineTextsBtn').addEventListener('click', combineTexts);
            document.getElementById('uploadTextBtn').addEventListener('click', () => document.getElementById('uploadTextInput').click());
            document.getElementById('uploadTextInput').addEventListener('change', uploadEditedText);
        });

        function initializeResizableImages() {
            $('.image-container').each(function() {
                initializeSingleResizable(this.id.replace('imageContainer_', ''));
            });
        }

        function initializeSingleResizable(index) {
            const $container = $(`#imageContainer_${index}`);
            const imageId = `image_${index}`;
            let savedAspectRatio = $(`#selectedAspectRatio_${index}`).val();
            let aspectRatioValue = savedAspectRatio === "false" ? false : eval(savedAspectRatio);

            $(`#aspectRatioControls_${index} button`).removeClass('active');
            $(`#aspectRatioControls_${index} button[data-ratio="${savedAspectRatio}"]`).addClass('active');

            const initialWidth = parseFloat($(`#imageWidth_${index}`).val()) || 250;
            const initialHeight = parseFloat($(`#imageHeight_${index}`).val()) || (initialWidth / (aspectRatioValue || 16/9));

            $container.css({
                width: initialWidth,
                height: initialHeight
            });

            if (resizableInstances[imageId]) {
                $container.resizable("destroy");
                delete resizableInstances[imageId];
            }

            $container.resizable({
                aspectRatio: aspectRatioValue,
                handles: 'ne, se, sw, nw',
                minWidth: 50,
                minHeight: 50,
                stop: function(event, ui) {
                    $(`#imageWidth_${index}`).val(ui.size.width);
                    $(`#imageHeight_${index}`).val(ui.size.height);
                    displayStatusMessage(`Đã cập nhật kích thước ảnh ${parseInt(index) + 1}: ${ui.size.width}px x ${ui.size.height}px`, 'success');
                }
            });
            resizableInstances[imageId] = $container;
        }

        function setAspectRatio(index, ratio, buttonElement) {
            const $container = $(`#imageContainer_${index}`);
            const imageId = `image_${index}`;

            $(buttonElement).siblings().removeClass('active');
            $(buttonElement).addClass('active');

            $(`#selectedAspectRatio_${index}`).val($(buttonElement).data('ratio'));

            if (resizableInstances[imageId]) {
                $container.resizable("destroy");
                delete resizableInstances[imageId];
            }

            $container.resizable({
                aspectRatio: ratio,
                handles: 'ne, se, sw, nw',
                minWidth: 50,
                minHeight: 50,
                stop: function(event, ui) {
                    $(`#imageWidth_${index}`).val(ui.size.width);
                    $(`#imageHeight_${index}`).val(ui.size.height);
                    displayStatusMessage(`Đã cập nhật kích thước ảnh ${parseInt(index) + 1}: ${ui.size.width}px x ${ui.size.height}px`, 'success');
                }
            });
            resizableInstances[imageId] = $container;

            displayStatusMessage(`Đã đặt tỷ lệ khung hình cho ảnh ${index + 1} thành ${$(buttonElement).text()}.`, 'info');
        }

        function getAntiforgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        async function correctText(index) {
            const textarea = document.getElementById(`text_${index}`);
            if (!textarea) {
                console.warn(`Textarea with ID text_${index} not found. Skipping correction.`);
                return false;
            }

            const spinner = document.getElementById(`spinner_${index}`);
            const button = textarea.parentElement.querySelector('.btn-correct');
            const originalButtonHtml = button.innerHTML;

            const originalText = textarea.value;

            spinner.style.display = 'inline-block';
            button.disabled = true;
            button.classList.add('btn-loading');
            button.innerHTML = `Đang sửa... <span class="spinner" style="display: inline-block;"></span>`;

            try {
                const response = await fetch('/Home/CorrectTextWithGemini', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiforgeryToken()
                    },
                    body: JSON.stringify({ Text: originalText })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    textarea.value = data.correctedText;
                    originalTexts[textarea.id] = data.correctedText;
                    return true;
                } else {
                    console.error(`Lỗi khi chỉnh sửa văn bản cho mục ${index}: ${data.message || 'Không rõ lỗi.'}\nSử dụng văn bản gốc.`);
                    return false;
                }
            } catch (error) {
                console.error(`Lỗi khi gọi API Gemini cho mục ${index}:`, error);
                return false;
            } finally {
                spinner.style.display = 'none';
                button.disabled = false;
                button.classList.remove('btn-loading');
                button.innerHTML = originalButtonHtml;
            }
        }

        async function correctAllTextsWithGemini() {
            const textareas = document.querySelectorAll('textarea[name="selectedTexts"]');
            const globalSpinner = document.getElementById('globalSpinner');
            const globalMessage = document.getElementById('globalMessage');
            const globalStatusDiv = document.getElementById('globalStatus');
            const correctAllBtn = document.getElementById('correctAllBtn');
            const createVideoBtn = document.querySelector('.btn-primary[type="submit"]');
            const combineTextsBtn = document.getElementById('combineTextsBtn');
            const uploadTextBtn = document.getElementById('uploadTextBtn');
            const undoDeleteBtn = document.getElementById('undoDeleteBtn');
            const deleteButtons = document.querySelectorAll('.btn-delete');
            const reorderButtons = document.querySelectorAll('.reorder-buttons button');
            const imageContainers = $('.image-container');

            globalStatusDiv.style.display = 'flex';
            globalSpinner.style.display = 'inline-block';
            globalMessage.textContent = `Đang sửa 0/${textareas.length} mục...`;

            correctAllBtn.disabled = true;
            correctAllBtn.classList.add('btn-loading');
            correctAllBtn.innerHTML = `Đang xử lý... <span class="spinner" style="display: inline-block;"></span>`;

            if (createVideoBtn) {
                createVideoBtn.disabled = true;
                createVideoBtn.classList.add('btn-loading');
            }
            if (combineTextsBtn) {
                combineTextsBtn.disabled = true;
                combineTextsBtn.classList.add('btn-loading');
            }
            if (uploadTextBtn) {
                uploadTextBtn.disabled = true;
                uploadTextBtn.classList.add('btn-loading');
            }
            if (undoDeleteBtn) {
                undoDeleteBtn.disabled = true;
            }
            deleteButtons.forEach(btn => btn.disabled = true);
            reorderButtons.forEach(btn => btn.disabled = true);
            imageContainers.resizable("disable");

            let correctedCount = 0;
            let errorCount = 0;

            for (let i = 0; i < textareas.length; i++) {
                const textarea = textareas[i];
                const itemIndex = parseInt(textarea.id.replace('text_', ''));
                globalMessage.textContent = `Đang xử lý mục ${i + 1}/${textareas.length}...`;
                try {
                    const success = await correctText(itemIndex);
                    if (success) {
                        correctedCount++;
                    } else {
                        errorCount++;
                    }
                } catch (e) {
                    errorCount++;
                    console.error(`Error processing item ${i}:`, e);
                }
            }

            globalSpinner.style.display = 'none';
            if (errorCount === 0) {
                globalMessage.textContent = `Đã sửa thành công tất cả ${correctedCount} mục!`;
                globalStatusDiv.style.color = '#28a745';
            } else {
                globalMessage.textContent = `Hoàn thành: ${correctedCount} mục sửa thành công, ${errorCount} mục lỗi.`;
                globalStatusDiv.style.color = '#dc3545';
            }

            correctAllBtn.disabled = false;
            correctAllBtn.classList.remove('btn-loading');
            correctAllBtn.innerHTML = `Sửa tất cả tiếng Việt với Gemini <span class="spinner" id="correctAllSpinner"></span>`;
            if (createVideoBtn) {
                createVideoBtn.disabled = false;
                createVideoBtn.classList.remove('btn-loading');
            }
            if (combineTextsBtn) {
                combineTextsBtn.disabled = false;
                combineTextsBtn.classList.remove('btn-loading');
            }
            if (uploadTextBtn) {
                uploadTextBtn.disabled = false;
                uploadTextBtn.classList.remove('btn-loading');
            }
            if (undoDeleteBtn) {
                undoDeleteBtn.disabled = false;
            }
            deleteButtons.forEach(btn => btn.disabled = false);
            reorderButtons.forEach(btn => btn.disabled = false);
            imageContainers.resizable("enable");
        }

        async function combineTexts() {
            const selectedTexts = Array.from(document.querySelectorAll('textarea[name="selectedTexts"]')).map(textarea => textarea.value);
            const translatedTexts = Array.from(document.querySelectorAll('textarea[name="translatedTexts"]')).map(textarea => textarea.value);
            const languageSelect = document.getElementById('language');
            const language = languageSelect ? languageSelect.value : 'vi';
            const combineBtn = document.getElementById('combineTextsBtn');
            const spinner = document.getElementById('combineSpinner');
            const globalSpinner = document.getElementById('globalSpinner');
            const globalMessage = document.getElementById('globalMessage');
            const globalStatusDiv = document.getElementById('globalStatus');
            const correctAllBtn = document.getElementById('correctAllBtn');
            const createVideoBtn = document.querySelector('.btn-primary[type="submit"]');
            const uploadTextBtn = document.getElementById('uploadTextBtn');
            const undoDeleteBtn = document.getElementById('undoDeleteBtn');
            const deleteButtons = document.querySelectorAll('.btn-delete');
            const reorderButtons = document.querySelectorAll('.reorder-buttons button');
            const imageContainers = $('.image-container');

            spinner.style.display = 'inline-block';
            combineBtn.disabled = true;
            combineBtn.classList.add('btn-loading');
            combineBtn.innerHTML = `Đang xử lý... <span class="spinner" style="display: inline-block;"></span>`;

            globalStatusDiv.style.display = 'flex';
            globalSpinner.style.display = 'inline-block';
            globalMessage.textContent = `Đang gộp văn bản...`;

            if (correctAllBtn) {
                correctAllBtn.disabled = true;
                correctAllBtn.classList.add('btn-loading');
            }
            if (createVideoBtn) {
                createVideoBtn.disabled = true;
                createVideoBtn.classList.add('btn-loading');
            }
            if (uploadTextBtn) {
                uploadTextBtn.disabled = true;
                uploadTextBtn.classList.add('btn-loading');
            }
            if (undoDeleteBtn) {
                undoDeleteBtn.disabled = true;
            }
            deleteButtons.forEach(btn => btn.disabled = true);
            reorderButtons.forEach(btn => btn.disabled = true);
            imageContainers.resizable("disable");

            try {
                const response = await fetch('/Home/CombineTexts', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': getAntiforgeryToken(),
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                    },
                    body: new URLSearchParams({
                        ...selectedTexts.reduce((acc, text, i) => { acc[`selectedTexts[${i}]`] = text; return acc; }, {}),
                        ...translatedTexts.reduce((acc, text, i) => { acc[`translatedTexts[${i}]`] = text; return acc; }, {}),
                        'language': language
                    }).toString()
                });

                if (!response.ok) {
                    throw new Error(`HTTP error: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    globalSpinner.style.display = 'none';
                    globalMessage.innerHTML = `Đã gộp văn bản thành công! Tải về <a href="${data.textFilePath}" download>tại đây</a>.`;
                    globalStatusDiv.style.color = '#28a745';
                } else {
                    throw new Error(data.message || 'Lỗi không xác định khi gộp văn bản.');
                }
            } catch (error) {
                globalSpinner.style.display = 'none';
                globalMessage.textContent = `Lỗi: ${error.message}`;
                globalStatusDiv.style.color = '#dc3545';
                console.error('Error combining texts:', error);
            } finally {
                spinner.style.display = 'none';
                combineBtn.disabled = false;
                combineBtn.classList.remove('btn-loading');
                combineBtn.innerHTML = `Gộp văn bản <span class="spinner" id="combineSpinner"></span>`;

                if (correctAllBtn) {
                    correctAllBtn.disabled = false;
                    correctAllBtn.classList.remove('btn-loading');
                }
                if (createVideoBtn) {
                    createVideoBtn.disabled = false;
                    createVideoBtn.classList.remove('btn-loading');
                }
                if (uploadTextBtn) {
                    uploadTextBtn.disabled = false;
                    uploadTextBtn.classList.remove('btn-loading');
                }
                if (undoDeleteBtn) {
                    undoDeleteBtn.disabled = false;
                }
                deleteButtons.forEach(btn => btn.disabled = false);
                reorderButtons.forEach(btn => btn.disabled = false);
                imageContainers.resizable("enable");
            }
        }

        function uploadEditedText(event) {
            const fileInput = event.target;
            const file = fileInput.files[0];
            if (!file) {
                console.error('Không có file nào được chọn.');
                return;
            }

            const uploadSpinner = document.getElementById('uploadSpinner');
            const uploadTextBtn = document.getElementById('uploadTextBtn');
            const globalSpinner = document.getElementById('globalSpinner');
            const globalMessage = document.getElementById('globalMessage');
            const globalStatusDiv = document.getElementById('globalStatus');
            const correctAllBtn = document.getElementById('correctAllBtn');
            const combineTextsBtn = document.getElementById('combineTextsBtn');
            const createVideoBtn = document.querySelector('.btn-primary[type="submit"]');
            const undoDeleteBtn = document.getElementById('undoDeleteBtn');
            const deleteButtons = document.querySelectorAll('.btn-delete');
            const reorderButtons = document.querySelectorAll('.reorder-buttons button');
            const imageContainers = $('.image-container');

            uploadSpinner.style.display = 'inline-block';
            globalStatusDiv.style.display = 'flex';
            globalSpinner.style.display = 'inline-block';
            globalMessage.textContent = 'Đang xử lý file văn bản...';

            if (correctAllBtn) {
                correctAllBtn.disabled = true;
                correctAllBtn.classList.add('btn-loading');
            }
            if (combineTextsBtn) {
                combineTextsBtn.disabled = true;
                combineTextsBtn.classList.add('btn-loading');
            }
            if (createVideoBtn) {
                createVideoBtn.disabled = true;
                createVideoBtn.classList.add('btn-loading');
            }
            if (undoDeleteBtn) {
                undoDeleteBtn.disabled = true;
            }
            deleteButtons.forEach(btn => btn.disabled = true);
            reorderButtons.forEach(btn => btn.disabled = true);
            imageContainers.resizable("disable");

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const textContent = e.target.result;
                    const textSegments = textContent.split(/\n\s*\n/).filter(segment => segment.trim() !== '');
                    const textAreas = document.querySelectorAll('textarea[name="selectedTexts"]');

                    if (textSegments.length !== textAreas.length) {
                        throw new Error(`Số lượng đoạn văn bản trong file (${textSegments.length}) không khớp với số ảnh (${textAreas.length}). Vui lòng kiểm tra lại định dạng file.`);
                    }

                    textAreas.forEach((textarea, index) => {
                        textarea.value = textSegments[index].trim();
                        originalTexts[textarea.id] = textSegments[index].trim();
                    });

                    globalSpinner.style.display = 'none';
                    globalMessage.textContent = `Đã tải lên và điền ${textSegments.length} đoạn văn bản thành công!`;
                    globalStatusDiv.style.color = '#28a745';
                } catch (error) {
                    globalSpinner.style.display = 'none';
                    globalMessage.textContent = `Lỗi khi xử lý file: ${error.message}`;
                    globalStatusDiv.style.color = '#dc3545';
                    console.error('Error processing uploaded file:', error);
                } finally {
                    uploadSpinner.style.display = 'none';
                    if (correctAllBtn) {
                        correctAllBtn.disabled = false;
                        correctAllBtn.classList.remove('btn-loading');
                    }
                    if (combineTextsBtn) {
                        combineTextsBtn.disabled = false;
                        combineTextsBtn.classList.remove('btn-loading');
                    }
                    if (createVideoBtn) {
                        createVideoBtn.disabled = false;
                        createVideoBtn.classList.remove('btn-loading');
                    }
                    if (undoDeleteBtn) {
                        undoDeleteBtn.disabled = false;
                    }
                    deleteButtons.forEach(btn => btn.disabled = false);
                    reorderButtons.forEach(btn => btn.disabled = false);
                    imageContainers.resizable("enable");
                    fileInput.value = '';
                }
            };

            reader.onerror = function(e) {
                globalSpinner.style.display = 'none';
                globalMessage.textContent = 'Lỗi khi đọc file.';
                globalStatusDiv.style.color = '#dc3545';
                console.error('Error reading file:', e);

                uploadSpinner.style.display = 'none';
                if (correctAllBtn) {
                    correctAllBtn.disabled = false;
                    correctAllBtn.classList.remove('btn-loading');
                }
                if (combineTextsBtn) {
                    combineTextsBtn.disabled = false;
                    combineTextsBtn.classList.remove('btn-loading');
                }
                if (createVideoBtn) {
                    createVideoBtn.disabled = false;
                    createVideoBtn.classList.remove('btn-loading');
                }
                if (undoDeleteBtn) {
                    undoDeleteBtn.disabled = false;
                }
                deleteButtons.forEach(btn => btn.disabled = false);
                reorderButtons.forEach(btn => btn.disabled = false);
                imageContainers.resizable("enable");
                fileInput.value = '';
            };

            reader.readAsText(file);
        }

        function resetText(index) {
            const textarea = document.getElementById(`text_${index}`);
            if (textarea && originalTexts[textarea.id]) {
                textarea.value = originalTexts[textarea.id];
                displayStatusMessage(`Đã hoàn tác văn bản cho mục ${index + 1}.`, 'success');
            } else {
                displayStatusMessage(`Không thể hoàn tác văn bản cho mục ${index + 1}.`, 'danger');
            }
        }

        function deleteImageTextPair(index, imageUrl, text, translatedText) {
            const pairToRemove = document.getElementById(`imageTextPair_${index}`);
            if (pairToRemove) {
                const imageId = `image_${index}`;
                const imageContainer = $(`#imageContainer_${index}`);
                const currentWidth = imageContainer.width();
                const currentHeight = imageContainer.height();
                const currentAspectRatio = $(`#selectedAspectRatio_${index}`).val();
                const currentText = $(`#text_${index}`).val();
                const currentTranslatedText = $(`#translatedText_${index}`).val();

                if (resizableInstances[imageId]) {
                    resizableInstances[imageId].resizable("destroy");
                    delete resizableInstances[imageId];
                }

                deletedItems.push({
                    index: index,
                    html: pairToRemove.outerHTML,
                    imageUrl: imageUrl,
                    text: currentText,
                    translatedText: currentTranslatedText,
                    width: currentWidth,
                    height: currentHeight,
                    aspectRatio: currentAspectRatio
                });

                pairToRemove.remove();
                updateUndoButtonVisibility();
                displayStatusMessage(`Đã xóa mục ${index + 1}. Bạn có thể hoàn tác.`, 'success');
                reindexFormElements(index);
            }
        }

        function undoDelete() {
            if (deletedItems.length > 0) {
                const lastDeleted = deletedItems.pop();
                const container = document.getElementById('imageTextPairsContainer');

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = lastDeleted.html;
                const restoredElement = tempDiv.firstElementChild;

                container.appendChild(restoredElement);

                const restoredIndex = nextIndex++;
                restoredElement.id = `imageTextPair_${restoredIndex}`;

                const imgUrlInput = restoredElement.querySelector('input[name="selectedImages"]');
                if (imgUrlInput) imgUrlInput.value = lastDeleted.imageUrl;

                const imageWidthInput = restoredElement.querySelector('input[name="imageWidths"]');
                if (imageWidthInput) {
                    imageWidthInput.id = `imageWidth_${restoredIndex}`;
                    imageWidthInput.value = lastDeleted.width;
                }
                const imageHeightInput = restoredElement.querySelector('input[name="imageHeights"]');
                if (imageHeightInput) {
                    imageHeightInput.id = `imageHeight_${restoredIndex}`;
                    imageHeightInput.value = lastDeleted.height;
                }
                const aspectRatioInput = restoredElement.querySelector('input[name="selectedAspectRatios"]');
                if (aspectRatioInput) {
                    aspectRatioInput.id = `selectedAspectRatio_${restoredIndex}`;
                    aspectRatioInput.value = lastDeleted.aspectRatio;
                }

                const imageContainer = restoredElement.querySelector('.image-container');
                if (imageContainer) {
                    imageContainer.id = `imageContainer_${restoredIndex}`;
                    const imgElement = imageContainer.querySelector('img');
                    if (imgElement) {
                        imgElement.id = `image_${restoredIndex}`;
                    }
                }

                const textArea = restoredElement.querySelector('textarea[name="selectedTexts"]');
                if (textArea) {
                    textArea.id = `text_${restoredIndex}`;
                    textArea.value = lastDeleted.text;
                    originalTexts[`text_${restoredIndex}`] = lastDeleted.text;
                }
                const translatedTextArea = restoredElement.querySelector('textarea[name="translatedTexts"]');
                if (translatedTextArea) {
                    translatedTextArea.id = `translatedText_${restoredIndex}`;
                    translatedTextArea.value = lastDeleted.translatedText;
                }

                initializeSingleResizable(restoredIndex);

                updateUndoButtonVisibility();
                displayStatusMessage(`Đã hoàn tác mục cuối cùng.`, 'success');
                reindexFormElements(lastDeleted.index);
            } else {
                displayStatusMessage('Không có mục nào để hoàn tác.', 'danger');
            }
        }

        function updateUndoButtonVisibility() {
            const undoBtn = document.getElementById('undoDeleteBtn');
            if (undoBtn) {
                undoBtn.style.display = deletedItems.length > 0 ? 'block' : 'none';
            }
        }

        function displayStatusMessage(message, type) {
            const globalStatusDiv = document.getElementById('globalStatus');
            const globalMessage = document.getElementById('globalMessage');
            const globalSpinner = document.getElementById('globalSpinner');

            globalSpinner.style.display = 'none';
            globalMessage.textContent = message;
            globalStatusDiv.style.display = 'flex';

            if (type === 'success') {
                globalStatusDiv.style.color = '#155724';
                globalStatusDiv.style.backgroundColor = '#d4edda';
                globalStatusDiv.style.borderColor = '#c3e6cb';
            } else if (type === 'danger') {
                globalStatusDiv.style.color = '#721c24';
                globalStatusDiv.style.backgroundColor = '#f8d7da';
                globalStatusDiv.style.borderColor = '#f5c6cb';
            } else if (type === 'info') {
                globalStatusDiv.style.color = '#004085';
                globalStatusDiv.style.backgroundColor = '#cce5ff';
                globalStatusDiv.style.borderColor = '#b8daff';
            }
            setTimeout(() => {
                globalStatusDiv.style.display = 'none';
            }, 5000);
        }

        function reindexFormElements(startIndex = 0) {
            const container = document.getElementById('imageTextPairsContainer');
            const pairs = Array.from(container.children).slice(startIndex);

            pairs.forEach((pair, index) => {
                const newIndex = startIndex + index;
                const oldId = pair.id.replace('imageTextPair_', '');
                pair.id = `imageTextPair_${newIndex}`;

                const imgUrlInput = pair.querySelector('input[name="selectedImages"]');
                const imageWidthInput = pair.querySelector('input[name="imageWidths"]');
                if (imageWidthInput) {
                    imageWidthInput.id = `imageWidth_${newIndex}`;
                }
                const imageHeightInput = pair.querySelector('input[name="imageHeights"]');
                if (imageHeightInput) {
                    imageHeightInput.id = `imageHeight_${newIndex}`;
                }
                const aspectRatioInput = pair.querySelector('input[name="selectedAspectRatios"]');
                if (aspectRatioInput) {
                    aspectRatioInput.id = `selectedAspectRatio_${newIndex}`;
                }

                const imageContainer = pair.querySelector('.image-container');
                if (imageContainer) {
                    imageContainer.id = `imageContainer_${newIndex}`;
                    const imgElement = imageContainer.querySelector('img');
                    if (imgElement) {
                        const oldImageId = `image_${oldId}`;
                        const newImageId = `image_${newIndex}`;
                        if (resizableInstances[oldImageId]) {
                            resizableInstances[oldImageId].resizable("destroy");
                            delete resizableInstances[oldImageId];
                        }
                        imgElement.id = newImageId;
                    }
                }

                const aspectRatioControls = pair.querySelector('.aspect-ratio-controls');
                if (aspectRatioControls) {
                    aspectRatioControls.id = `aspectRatioControls_${newIndex}`;
                }

                const textArea = pair.querySelector('textarea[name="selectedTexts"]');
                if (textArea) {
                    textArea.id = `text_${newIndex}`;
                    if (originalTexts[`text_${oldId}`]) {
                        originalTexts[`text_${newIndex}`] = originalTexts[`text_${oldId}`];
                        delete originalTexts[`text_${oldId}`];
                    }
                }

                const translatedTextArea = pair.querySelector('textarea[name="translatedTexts"]');
                if (translatedTextArea) {
                    translatedTextArea.id = `translatedText_${newIndex}`;
                }

                initializeSingleResizable(newIndex);
            });
        }

        function moveUp(index) {
            const container = document.getElementById('imageTextPairsContainer');
            const currentPair = document.getElementById(`imageTextPair_${index}`);
            if (!currentPair || index === 0) return;

            const previousPair = document.getElementById(`imageTextPair_${index - 1}`);
            if (previousPair) {
                container.insertBefore(currentPair, previousPair);
                reindexFormElements(index - 1);
            }
        }

        function moveDown(index) {
            const container = document.getElementById('imageTextPairsContainer');
            const currentPair = document.getElementById(`imageTextPair_${index}`);
            const pairs = Array.from(container.children);
            if (!currentPair || index === pairs.length - 1) return;

            const nextPair = document.getElementById(`imageTextPair_${index + 1}`);
            if (nextPair) {
                container.insertBefore(nextPair, currentPair);
                reindexFormElements(index);
            }
        }
    </script>
}